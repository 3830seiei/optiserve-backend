((.venv) ) smds@aoi-ph-017:~/projects/optiserve-backend/data$ pytest tests/ -v -s
================================================== test session starts ==================================================
platform linux -- Python 3.12.11, pytest-8.4.1, pluggy-1.6.0 -- /home/smds/projects/optiserve-backend/.venv/bin/python
cachedir: .pytest_cache
rootdir: /home/smds/projects/optiserve-backend/data
plugins: anyio-4.9.0
collected 0 items

================================================= no tests ran in 0.00s =================================================
ERROR: file or directory not found: tests/

((.venv) ) smds@aoi-ph-017:~/projects/optiserve-backend/data$ cd ..
((.venv) ) smds@aoi-ph-017:~/projects/optiserve-backend$ pytest tests/ -v -s
================================================== test session starts ==================================================
platform linux -- Python 3.12.11, pytest-8.4.1, pluggy-1.6.0 -- /home/smds/projects/optiserve-backend/.venv/bin/python
cachedir: .pytest_cache
rootdir: /home/smds/projects/optiserve-backend
plugins: anyio-4.9.0
collecting ... 🔍 クリーンアップ開始: テストレポート選択データをチェック中...
🧹 DB クリーンアップ: レポート選択データ0件を削除
✅ クリーンアップ完了
collected 89 items

tests/test_01_facilities_api.py::test_create_facility --------------------------------------------------
リクエストペイロード: {'medical_name': 'pytest病院_mruem5', 'address_postal_code': '530-0001', 'address_prefecture': '大 阪府', 'address_city': '大阪市北区', 'address_line1': 'テスト区2-2-2', 'phone_number': '07-6192-2845'}
レスポンス: {'medical_name': 'pytest病院_mruem5', 'address_postal_code': '530-0001', 'address_prefecture': '大阪府', 'address_city': '大阪市北区', 'address_line1': 'テスト区2-2-2', 'address_line2': None, 'phone_number': '07-6192-2845', 'medical_id': 28, 'regdate': '2025-08-28T18:25:00.554273', 'lastupdate': '2025-08-28T18:25:00.554273'}
PASSED
tests/test_01_facilities_api.py::test_create_facility_minimum_fields PASSED
tests/test_01_facilities_api.py::test_get_facilities PASSED
tests/test_01_facilities_api.py::test_get_facilities_with_pagination PASSED
tests/test_01_facilities_api.py::test_get_facility PASSED
tests/test_01_facilities_api.py::test_get_facility_not_found PASSED
tests/test_01_facilities_api.py::test_update_facility --------------------------------------------------
リクエストペイロード: {'medical_name': 'pytest病院_a3td0y_更新', 'address_postal_code': '231-0001', 'address_prefecture': '神奈川県', 'address_city': '横浜市中区', 'address_line1': 'テスト区3-3-3', 'phone_number': '045-1234-5678'}
レスポンス: {'medical_name': 'pytest病院_a3td0y_更新', 'address_postal_code': '231-0001', 'address_prefecture': '神奈川県', 'address_city': '横浜市中区', 'address_line1': 'テスト区3-3-3', 'address_line2': None, 'phone_number': '045-1234-5678', 'medical_id': 30, 'regdate': '2025-08-28T18:25:00.622066', 'lastupdate': '2025-08-28T18:25:00.685661'}
PASSED
tests/test_01_facilities_api.py::test_update_facility_not_found PASSED
tests/test_01_facilities_api.py::test_create_facility_invalid_data PASSED
tests/test_02_user_entity_links_api.py::test_create_user_entity_link
🚀 テスト環境セットアップ開始...
🔍 クリーンアップ開始: entity_relation_id=6のデータをチェック中...
API レスポンス: status_code=200
取得した連携データ数: 25
チェック中: entity_relation_id=1
チェック中: entity_relation_id=4
チェック中: entity_relation_id=5
チェック中: entity_relation_id=8
チェック中: entity_relation_id=9
チェック中: entity_relation_id=7
チェック中: entity_relation_id=11
チェック中: entity_relation_id=12
チェック中: entity_relation_id=10
チェック中: entity_relation_id=15
チェック中: entity_relation_id=13
チェック中: entity_relation_id=14
チェック中: entity_relation_id=18
チェック中: entity_relation_id=16
チェック中: entity_relation_id=17
チェック中: entity_relation_id=6
削除対象発見: entity_type=1, entity_relation_id=6
チェック中: entity_relation_id=21
チェック中: entity_relation_id=19
チェック中: entity_relation_id=20
チェック中: entity_relation_id=22
チェック中: entity_relation_id=24
チェック中: entity_relation_id=23
チェック中: entity_relation_id=25
チェック中: entity_relation_id=27
チェック中: entity_relation_id=26
✨ クリーンアップ対象なし: entity_relation_id=6のデータは存在しません
✅ テスト環境セットアップ完了

FAILED
tests/test_02_user_entity_links_api.py::test_create_invalid_entity_type ✅ 無効な組織種別エラー: 組織種別（entity_type） は1のみサポートしています（医療機関タイプ）
PASSED
tests/test_02_user_entity_links_api.py::test_create_invalid_entity_relation_id ✅ 存在しない医療機関IDエラー: 医療機関ID （entity_relation_id） 99999 は存在しません
PASSED
tests/test_02_user_entity_links_api.py::test_create_invalid_classification_level ✅ 無効な分析レベルエラー: {'detail': [{'type': 'value_error', 'loc': ['body', 'analiris_classification_level'], 'msg': 'Value error, 分析レポート分類レベル（analiris_classification_level）は1-3の値のみ有効です', 'input': 4, 'ctx': {'error': {}}}]}
PASSED
tests/test_02_user_entity_links_api.py::test_create_missing_required_fields ✅ 必須フィールド不足エラー（entity_name）
PASSED
tests/test_02_user_entity_links_api.py::test_read_user_entity_links 取得した連携情報: [{'entity_type': 1, 'entity_relation_id': 1, 'entity_name': '東京医科大学', 'notification_email_list': '["info@juntendo.ac.jp"]', 'count_reportout_classification': 5, 'analiris_classification_level': 1, 'entity_address_postal_code': '160-8402', 'entity_address_prefecture': '東京都', 'entity_address_city': '新宿区', 'entity_address_line1': '新宿6-1-1', 'entity_address_line2': None, 'entity_phone_number': '03-3351-6141', 'regdate': '2025-08-13T10:30:00', 'lastupdate': '2025-08-13T10:30:00'}, {'entity_type': 1, 'entity_relation_id': 4, 'entity_name': '愛知医科大学', 'notification_email_list': '["info@aichi-med-u.ac.jp", "admin@aichi-med-u.ac.jp"]', 'count_reportout_classification': 5, 'analiris_classification_level': 1, 'entity_address_postal_code': '480-1195', 'entity_address_prefecture': '愛知県', 'entity_address_city': '長久手市', 'entity_address_line1': '岩作雁又１番地１', 'entity_address_line2': None, 'entity_phone_number': '0561-62-3311', 'regdate': '2025-08-13T10:30:00', 'lastupdate': '2025-08-13T10:30:00'}, {'entity_type': 1, 'entity_relation_id': 5, 'entity_name': '順天堂医院', 'notification_email_list': '["info@tokyo-med.ac.jp"]', 'count_reportout_classification': 5, 'analiris_classification_level': 1, 'entity_address_postal_code': '113-8431', 'entity_address_prefecture': '東京都', 'entity_address_city': '文京区', 'entity_address_line1': '本郷3-1-3', 'entity_address_line2': None, 'entity_phone_number': '03-3813-3111', 'regdate': '2025-08-13T10:30:00', 'lastupdate': '2025-08-13T10:30:00'}, {'entity_type': 1, 'entity_relation_id': 8, 'entity_name': 'pytest連携組織_031jy0', 'notification_email_list': '["pytest_1nbfn0@example.com"]', 'count_reportout_classification': 5, 'analiris_classification_level': 2, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-25T14:47:28.869958', 'lastupdate': '2025-08-25T14:47:28.869958'}, {'entity_type': 1, 'entity_relation_id': 9, 'entity_name': '更新済み_pytest連携組織_2vbdik', 'notification_email_list': '["pytest_9vpcpy@example.com"]', 'count_reportout_classification': 3, 'analiris_classification_level': 3, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-25T14:47:28.883818', 'lastupdate': '2025-08-25T14:47:28.887940'}, {'entity_type': 1, 'entity_relation_id': 7, 'entity_name': 'pytest連携組織_ac4x67', 'notification_email_list': '["pytest_ld4egf@example.com"]', 'count_reportout_classification': 5, 'analiris_classification_level': 2, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-25T14:47:28.896230', 'lastupdate': '2025-08-25T14:47:28.896230'}, {'entity_type': 1, 'entity_relation_id': 11, 'entity_name': 'pytest連携組織_a0ksrf', 'notification_email_list': '["pytest_iopuzx@example.com"]', 'count_reportout_classification': 5, 'analiris_classification_level': 2, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-26T17:13:07.921630', 'lastupdate': '2025-08-26T17:13:07.921630'}, {'entity_type': 1, 'entity_relation_id': 12, 'entity_name': '更新済み_pytest連携組織_m8027a', 'notification_email_list': '["pytest_u7zfzw@example.com"]', 'count_reportout_classification': 3, 'analiris_classification_level': 3, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-26T17:13:07.935949', 'lastupdate': '2025-08-26T17:13:07.940366'}, {'entity_type': 1, 'entity_relation_id': 10, 'entity_name': 'pytest連携組織_xd2m3s', 'notification_email_list': '["pytest_0sj97x@example.com"]', 'count_reportout_classification': 5, 'analiris_classification_level': 2, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-26T17:13:07.948816', 'lastupdate': '2025-08-26T17:13:07.948816'}, {'entity_type': 1, 'entity_relation_id': 15, 'entity_name': 'pytest連携組織_ub0i4z', 'notification_email_list': '["pytest_oj63xq@example.com"]', 'count_reportout_classification': 5, 'analiris_classification_level': 2, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-27T14:43:14.267228', 'lastupdate': '2025-08-27T14:43:14.267228'}, {'entity_type': 1, 'entity_relation_id': 13, 'entity_name': '更新済み_pytest連携組織_nr9ba3', 'notification_email_list': '["pytest_2qevzt@example.com"]', 'count_reportout_classification': 3, 'analiris_classification_level': 3, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-27T14:43:14.292606', 'lastupdate': '2025-08-27T14:43:14.298908'}, {'entity_type': 1, 'entity_relation_id': 14, 'entity_name': 'pytest連携組織_e2a0yj', 'notification_email_list': '["pytest_bz3olt@example.com"]', 'count_reportout_classification': 5, 'analiris_classification_level': 2, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-27T14:43:14.309094', 'lastupdate': '2025-08-27T14:43:14.309094'}, {'entity_type': 1, 'entity_relation_id': 18, 'entity_name': 'pytest連携組織_r70kbk', 'notification_email_list': '["pytest_oqr8xy@example.com"]', 'count_reportout_classification': 5, 'analiris_classification_level': 2, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-27T15:38:40.354101', 'lastupdate': '2025-08-27T15:38:40.354101'}, {'entity_type': 1, 'entity_relation_id': 16, 'entity_name': '更新済み_pytest連携組織_2owqts', 'notification_email_list': '["pytest_ks0snj@example.com"]', 'count_reportout_classification': 3, 'analiris_classification_level': 3, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-27T15:38:40.369497', 'lastupdate': '2025-08-27T15:38:40.374831'}, {'entity_type': 1, 'entity_relation_id': 17, 'entity_name': 'pytest連携組織_ax2n31', 'notification_email_list': '["pytest_7f30ik@example.com"]', 'count_reportout_classification': 5, 'analiris_classification_level': 2, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-27T15:38:40.383836', 'lastupdate': '2025-08-27T15:38:40.383836'}, {'entity_type': 1, 'entity_relation_id': 6, 'entity_name': 'pytest 連携組織_66spyq', 'notification_email_list': '["pytest_66h5gc@example.com"]', 'count_reportout_classification': 5, 'analiris_classification_level': 1, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-28T17:14:00.260581', 'lastupdate': '2025-08-28T17:14:00.260581'}, {'entity_type': 1, 'entity_relation_id': 21, 'entity_name': 'pytest連携組織_3ou2j9', 'notification_email_list': '["pytest_tdkpol@example.com"]', 'count_reportout_classification': 5, 'analiris_classification_level': 2, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-28T17:14:00.289370', 'lastupdate': '2025-08-28T17:14:00.289370'}, {'entity_type': 1, 'entity_relation_id': 19, 'entity_name': '更新済み_pytest連携組織_jkukq2', 'notification_email_list': '["pytest_jqqg5k@example.com"]', 'count_reportout_classification': 3, 'analiris_classification_level': 3, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-28T17:14:00.303225', 'lastupdate': '2025-08-28T17:14:00.306626'}, {'entity_type': 1, 'entity_relation_id': 20, 'entity_name': 'pytest連携組織_n2jv25', 'notification_email_list': '["pytest_5pf5v3@example.com"]', 'count_reportout_classification': 5, 'analiris_classification_level': 2, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-28T17:14:00.314645', 'lastupdate': '2025-08-28T17:14:00.314645'}, {'entity_type': 1, 'entity_relation_id': 22, 'entity_name': 'pytest連携組織_dgpxnp', 'notification_email_list': '["pytest_q1picc@example.com"]', 'count_reportout_classification': 5, 'analiris_classification_level': 2, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-28T17:59:21.519591', 'lastupdate': '2025-08-28T17:59:21.519591'}, {'entity_type': 1, 'entity_relation_id': 24, 'entity_name': '更新済み_pytest連携組織_lda84d', 'notification_email_list': '["pytest_agj57k@example.com"]', 'count_reportout_classification': 3, 'analiris_classification_level': 3, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-28T17:59:21.587711', 'lastupdate': '2025-08-28T17:59:21.603798'}, {'entity_type': 1, 'entity_relation_id': 23, 'entity_name': 'pytest連携組織_9ikepo', 'notification_email_list': '["pytest_2c8w2d@example.com"]', 'count_reportout_classification': 5, 'analiris_classification_level': 2, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-28T17:59:21.633481', 'lastupdate': '2025-08-28T17:59:21.633481'}, {'entity_type': 1, 'entity_relation_id': 25, 'entity_name': 'pytest連携組織_ru5lhf', 'notification_email_list': '["pytest_u6vodg@example.com"]', 'count_reportout_classification': 5, 'analiris_classification_level': 2, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-28T18:09:16.083945', 'lastupdate': '2025-08-28T18:09:16.083945'}, {'entity_type': 1, 'entity_relation_id': 27, 'entity_name': '更新済み_pytest連携組織_ekebjv', 'notification_email_list': '["pytest_bsh0jr@example.com"]', 'count_reportout_classification': 3, 'analiris_classification_level': 3, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-28T18:09:16.153431', 'lastupdate': '2025-08-28T18:09:16.178160'}, {'entity_type': 1, 'entity_relation_id': 26, 'entity_name': 'pytest連携組織_awhjvh', 'notification_email_list': '["pytest_890w3w@example.com"]', 'count_reportout_classification': 5, 'analiris_classification_level': 2, 'entity_address_postal_code': None, 'entity_address_prefecture': None, 'entity_address_city': None, 'entity_address_line1': None, 'entity_address_line2': None, 'entity_phone_number': None, 'regdate': '2025-08-28T18:09:16.217622', 'lastupdate': '2025-08-28T18:09:16.217622'}]
✅ 連携情報一覧取得成功: 25件
PASSED
tests/test_02_user_entity_links_api.py::test_read_user_entity_links_with_pagination ✅ ページネーション付き一覧取得成功: 5件
PASSED
tests/test_02_user_entity_links_api.py::test_read_user_entity_link_by_id ✅ 連携情報個別取得成功: entity_type=1, entity_relation_id=30, 組織名=pytest連携組織_x6zkl5
PASSED
tests/test_02_user_entity_links_api.py::test_read_nonexistent_user_entity_link ✅ 存在しない連携情報エラー: User entity link not found: entity_type=1, entity_relation_id=99999
PASSED
tests/test_02_user_entity_links_api.py::test_update_user_entity_link ✅ 連携情報更新成功: entity_type=1, entity_relation_id=28, 新組織名=更新済み_pytest連携組織_j6gbzm
PASSED
tests/test_02_user_entity_links_api.py::test_update_with_invalid_data ✅ 更新時の無効データエラー: 組織種別（entity_type ）は1のみサポートしています（医療機関タイプ）
PASSED
tests/test_02_user_entity_links_api.py::test_update_nonexistent_link ✅ 存在しない連携情報更新エラー: User entity link not found: entity_type=1, entity_relation_id=99999
PASSED
tests/test_03_user_api.py::test_login_with_temp_password PASSED
tests/test_03_user_api.py::test_update_user PASSED
tests/test_03_user_api.py::test_get_user PASSED
tests/test_03_user_api.py::test_retire_user PASSED
tests/test_03_user_api.py::test_login_suspended_user PASSED
tests/test_04_auth.py::TestAuthManagerUserInfo::test_get_user_info_admin_success PASSED
tests/test_04_auth.py::TestAuthManagerUserInfo::test_get_user_info_medical_success PASSED
tests/test_04_auth.py::TestAuthManagerUserInfo::test_get_user_info_not_found PASSED
tests/test_04_auth.py::TestAuthManagerAdminChecks::test_is_admin_user_id_true PASSED
tests/test_04_auth.py::TestAuthManagerAdminChecks::test_is_admin_user_id_false PASSED
tests/test_04_auth.py::TestAuthManagerAdminChecks::test_is_admin_by_user_info_true PASSED
tests/test_04_auth.py::TestAuthManagerAdminChecks::test_is_admin_by_user_info_false PASSED
tests/test_04_auth.py::TestAuthManagerAdminChecks::test_require_admin_permission_success PASSED
tests/test_04_auth.py::TestAuthManagerAdminChecks::test_require_admin_permission_failure PASSED
tests/test_04_auth.py::TestAuthManagerMedicalPermissions::test_get_user_medical_id_admin PASSED
tests/test_04_auth.py::TestAuthManagerMedicalPermissions::test_get_user_medical_id_medical_user PASSED
tests/test_04_auth.py::TestAuthManagerMedicalPermissions::test_get_user_medical_id_invalid_entity_type PASSED
tests/test_04_auth.py::TestAuthManagerMedicalPermissions::test_check_medical_permission_admin_access PASSED
tests/test_04_auth.py::TestAuthManagerMedicalPermissions::test_check_medical_permission_medical_user_own_facility PASSED
tests/test_04_auth.py::TestAuthManagerMedicalPermissions::test_check_medical_permission_medical_user_other_facility PASSED
tests/test_04_auth.py::TestAuthManagerMedicalPermissions::test_require_medical_permission_success PASSED
tests/test_04_auth.py::TestAuthManagerMedicalPermissions::test_require_medical_permission_failure PASSED
tests/test_04_auth.py::TestAuthManagerAccessibleMedicalIds::test_get_accessible_medical_ids_admin PASSED
tests/test_04_auth.py::TestAuthManagerAccessibleMedicalIds::test_get_accessible_medical_ids_medical_user PASSED
tests/test_04_auth.py::TestAuthManagerAccessibleMedicalIds::test_get_accessible_medical_ids_invalid_user PASSED
tests/test_04_auth.py::TestAuthManagerQueryFiltering::test_filter_by_medical_permission_admin PASSED
tests/test_04_auth.py::TestAuthManagerQueryFiltering::test_filter_by_medical_permission_medical_user PASSED
tests/test_04_auth.py::TestAuthManagerQueryFiltering::test_filter_by_medical_permission_no_access PASSED
tests/test_05_file_management_api.py::test_api_server_is_running ✅ APIサーバー稼働確認完了
PASSED
tests/test_05_file_management_api.py::test_file_upload_success レスポンス: status_code=200
✅ ファイルアップロード成功: medical_id=6, 実行月=2025-08
   アップロードファイル数: 3件
PASSED
tests/test_05_file_management_api.py::test_file_upload_nonexistent_medical_id ✅ 存在しない医療機関IDエラー: 医療機関ID（medical_id） 99999 は存在しません
PASSED
tests/test_05_file_management_api.py::test_file_upload_wrong_file_extension ✅ 無効なファイル拡張子エラー: 医療機器台帳ファイルはCSV形式である必要があります
PASSED
tests/test_05_file_management_api.py::test_file_upload_missing_file ✅ ファイル不足エラー確認完了
PASSED
tests/test_05_file_management_api.py::test_file_upload_overwrite ✅ 1回目アップロード成功: 3件
✅ 上書きアップロード成功: 1回目=2025-08-28T18:25:01, 2回目=2025-08-28T18:25:01
PASSED
tests/test_05_file_management_api.py::test_upload_status_endpoint ✅ アップロード状況取得成功: 0件の状況データ
PASSED
tests/test_05_file_management_api.py::test_available_reports_endpoint ✅ 利用可能レポート取得成功: 0件のレポート
PASSED
tests/test_05_file_management_api.py::test_system_file_download_success ✅ テスト用ファイルアップロード完了
✅ システムファイルダウンロード成功: equipment.csv (ファイル種別=1)
✅ システムファイルダウンロード成功: rental.csv (ファイル種別=2)
✅ システムファイルダウンロード成功: failure.csv (ファイル種別=3)
PASSED
tests/test_05_file_management_api.py::test_system_file_download_unauthorized ✅ 認証エラーテスト成功: APIキーなしで401エ ラー
✅ 認証エラーテスト成功: 間違ったAPIキーで401エラー
PASSED
tests/test_05_file_management_api.py::test_system_file_download_file_not_found ✅ ファイル未存在テスト成功: 存在しない医 療機関IDで404エラー
PASSED
tests/test_05_file_management_api.py::test_system_file_download_invalid_file_type ✅ 無効なファイル種別テスト成功: ファイル種別99で400エラー
PASSED
tests/test_05_file_management_api.py::test_publish_reports_unauthorized ✅ レポート公開認証エラーテスト成功: APIキーなし で401エラー
✅ レポート公開認証エラーテスト成功: 間違ったAPIキーで401エラー
PASSED
tests/test_05_file_management_api.py::test_publish_reports_with_auth ✅ レポート公開認証成功テスト完了: 認証通過後に404エラー（オンプレミスレポート未存在）
PASSED
tests/test_05_file_management_api.py::test_publish_onpremise_reports ❌ エラー詳細: 404, {"detail":"オンプレミスレポート が見つかりません: 医療機関ID=5, 年月=2025-05"}
FAILED
tests/test_05_file_management_api.py::test_publish_nonexistent_onpremise_reports ✅ 存在しない医療機関IDでレポート公開エ ラーテスト成功
PASSED
tests/test_05_file_management_api.py::test_report_download_after_publish ⚠️ レポート公開結果: 404 (既に公開済みの可能性)
📋 取得したpublication_id: 8
📊 ダウンロード前状態: download_user_id=10, download_datetime=2025-08-28 17:14:00.442110
FAILED
tests/test_05_file_management_api.py::test_report_download_nonexistent_publication ✅ 存在しないpublication_IDでダウンロ ードエラーテスト成功
PASSED
tests/test_05_file_management_api.py::test_report_download_multiple_times FAILED
tests/test_06_equipment_classifications_api.py::test_api_server_is_running ✅ APIサーバー起動確認完了
PASSED
tests/test_06_equipment_classifications_api.py::test_get_equipment_classifications ✅ 機器分類一覧取得成功: total=18, 取 得件数=18
   サンプル分類: 治療機器 (level=1)
PASSED
tests/test_06_equipment_classifications_api.py::test_get_equipment_classifications_pagination ✅ ページネーション確認完了: 1ページ目=5件, 2ページ目=5件
PASSED
tests/test_06_equipment_classifications_api.py::test_get_equipment_classifications_nonexistent_medical_id ✅ 存在しない医療機関IDでのエラーテスト成功
PASSED
tests/test_06_equipment_classifications_api.py::test_get_report_selection_empty ✅ レポート選択情報取得成功（初期状態）: max_count=5, 選択数=0
PASSED
tests/test_06_equipment_classifications_api.py::test_create_report_selection ✅ レポート選択情報登録成功: 登録数=3
   rank=1: 治療機器 (ID=1501)
   rank=2: 生命維持管理装置 (ID=1503)
   rank=3: 診断機器 (ID=1502)
PASSED
tests/test_06_equipment_classifications_api.py::test_get_report_selection_after_create ✅ レポート選択情報取得成功（登録 後）: 選択数=3
   選択情報:
     - rank=1: 治療機器 (ID=1501)
     - rank=2: 生命維持管理装置 (ID=1503)
     - rank=3: 診断機器 (ID=1502)
PASSED
tests/test_06_equipment_classifications_api.py::test_update_report_selection ✅ レポート選択情報更新成功: 更新数=5
PASSED
tests/test_06_equipment_classifications_api.py::test_create_report_selection_invalid_classification_ids ✅ 無効な機器分類IDでの登録エラーテスト成功
PASSED
tests/test_06_equipment_classifications_api.py::test_create_report_selection_duplicate_ids ✅ 重複した機器分類IDでの登録 エラーテスト成功
PASSED
tests/test_06_equipment_classifications_api.py::test_delete_report_selection ✅ レポート選択情報削除成功: 削除数=5
✅ 削除後の確認完了: 選択情報が空になりました
PASSED
tests/test_06_equipment_classifications_api.py::test_report_selection_nonexistent_medical_id ✅ 存在しない医療機関IDでの レポート選択エラーテスト成功
PASSED
tests/test_07_medical_equipment_analysis_api.py::TestMedicalEquipmentAnalysisAPI::test_get_equipment_analysis_settings_basic クリーンアップ完了: 200

=== 基本的な設定一覧取得テスト ===
✅ 総件数: 1144件
✅ 次ページ有無: True
✅ サンプルアイテム: ledger_id=5666, model='所管外機器（詳細はメモ参照）'
PASSED
tests/test_07_medical_equipment_analysis_api.py::TestMedicalEquipmentAnalysisAPI::test_get_equipment_analysis_settings_with_pagination クリーンアップ完了: 200

=== ページング機能テスト ===
✅ 1ページ目: 5件取得
✅ 2ページ目: 5件取得
✅ ページング正常動作
PASSED
tests/test_07_medical_equipment_analysis_api.py::TestMedicalEquipmentAnalysisAPI::test_update_analysis_target_success ク リーンアップ完了: 200

=== 分析対象フラグ更新成功テスト ===
✅ テスト対象: ledger_id=5666, 現在値=True → 新値=False
✅ 更新成功: 分析対象フラグを更新しました
✅ 設定反映確認完了
PASSED
tests/test_07_medical_equipment_analysis_api.py::TestMedicalEquipmentAnalysisAPI::test_update_analysis_target_same_as_default_error クリーンアップ完了: 200

=== デフォルト値同一エラーテスト ===
✅ テスト対象: ledger_id=5666, デフォルト値=True
✅ 期待通りのエラー: デフォルト値（True）と同じ値は設定できません。デフォルト値を使用する場合は設定を削除してください。
PASSED
tests/test_07_medical_equipment_analysis_api.py::TestMedicalEquipmentAnalysisAPI::test_update_classification_override_success クリーンアップ完了: 200

=== 分類上書き更新成功テスト ===
SKIPPED
tests/test_07_medical_equipment_analysis_api.py::TestMedicalEquipmentAnalysisAPI::test_restore_to_default_single クリーンアップ完了: 200

=== 個別デフォルト復帰テスト ===
✅ テスト用設定作成完了: ledger_id=5666
✅ 復帰成功: 機器ID 5666 の設定をデフォルトに復帰しました
✅ デフォルト復帰確認完了
PASSED
tests/test_07_medical_equipment_analysis_api.py::TestMedicalEquipmentAnalysisAPI::test_restore_to_default_all クリーンア ップ完了: 200

=== 全件デフォルト復帰テスト ===
✅ テスト用設定作成完了: 2件
✅ 全件復帰成功: 2件削除
   メッセージ: 医療機関ID 5 の 2 件の設定をデフォルトに復帰しました
✅ 全件デフォルト復帰確認完了
PASSED
tests/test_07_medical_equipment_analysis_api.py::TestMedicalEquipmentAnalysisAPI::test_invalid_ledger_id_error クリーンアップ完了: 200

=== 存在しない機器IDエラーテスト ===
✅ 期待通りのエラー: 指定された機器が見つかりません
PASSED
tests/test_07_medical_equipment_analysis_api.py::TestMedicalEquipmentAnalysisAPI::test_invalid_classification_id_error クリーンアップ完了: 200

=== 存在しない分類IDエラーテスト ===
✅ 期待通りのエラー: 指定された分類IDが存在しません
PASSED

======================================================= FAILURES ========================================================
_____________________________________________ test_create_user_entity_link ______________________________________________

    def test_create_user_entity_link():
        """ユーザー組織連携情報新規登録テスト"""
        entity_name = random_entity_name()
        payload = {
            "entity_type": 1,
            "entity_relation_id": 6,  # テスト用医療機関ID（例: 6）
            "entity_name": entity_name,
            "notification_email_list": random_email_list(),
            "count_reportout_classification": 5,
            "analiris_classification_level": 1  # 大分類
        }
        res = requests.post(f"{BASE_URL}/user-entity-links/", json=payload, headers=TEST_HEADERS)
>       assert res.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500]>.status_code

tests/test_02_user_entity_links_api.py:201: AssertionError
____________________________________________ test_publish_onpremise_reports _____________________________________________

    def test_publish_onpremise_reports():
        """オンプレミスレポート公開テスト（hpcode=5、2025-05月分）"""
        medical_id = 5
        publication_ym = "2025-05"
        system_key = "optiserve-internal-system-key-2025"

        data = {
            'publication_ym': publication_ym
        }
        headers = {"X-System-Key": system_key}

        publish_res = requests.post(
            f"{BASE_URL}/files/reports/publish/{medical_id}",
            data=data,
            headers=headers
        )

        if publish_res.status_code != 200:
            print(f"❌ エラー詳細: {publish_res.status_code}, {publish_res.text}")
>       assert publish_res.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

tests/test_05_file_management_api.py:552: AssertionError
__________________________________________ test_report_download_after_publish ___________________________________________

    def test_report_download_after_publish():
        """レポート公開後のダウンロードテスト（user_id=10）"""
        medical_id = 5
        publication_ym = "2025-05"
        system_key = "optiserve-internal-system-key-2025"
        download_user_id = "10"

        # Step 1: レポートを公開（まず公開されたレポートのpublication_idを取得）
        data = {
            'publication_ym': publication_ym
        }
        headers = {"X-System-Key": system_key}

        publish_res = requests.post(
            f"{BASE_URL}/files/reports/publish/{medical_id}",
            data=data,
            headers=headers
        )

        if publish_res.status_code != 200:
            # 既に公開済みの場合は問題なし
            print(f"⚠️ レポート公開結果: {publish_res.status_code} (既に公開済みの可能性)")
        else:
            publish_data = publish_res.json()
            print(f"✅ レポート公開成功: {len(publish_data['published_reports'])}件")

        # Step 2: DBから最新のpublication_idを取得してダウンロード実行
        from src.database import SessionLocal
        from src.models.pg_optigate.report_publication_log import ReportPublicationLog

        db = SessionLocal()
        try:
            # 対象医療機関・年月の最新レポートを取得
            latest_report = db.query(ReportPublicationLog).filter(
                ReportPublicationLog.medical_id == medical_id,
                ReportPublicationLog.publication_ym == publication_ym
            ).order_by(ReportPublicationLog.upload_datetime.desc()).first()

            if not latest_report:
                raise Exception(f"公開されたレポートが見つかりません: 医療機関ID={medical_id}, 年月={publication_ym}")

            publication_id = latest_report.publication_id
            print(f"📋 取得したpublication_id: {publication_id}")

            # ダウンロード前のDB状態を記録
            download_datetime_before = latest_report.download_datetime
            download_user_id_before = latest_report.download_user_id
            print(f"📊 ダウンロード前状態: download_user_id={download_user_id_before}, download_datetime={download_datetime_before}")

        finally:
            db.close()

        # Step 3: レポートダウンロード実行
        download_res = requests.get(
            f"{BASE_URL}/files/reports/download/{publication_id}",
            params={"user_id": download_user_id},
            headers=TEST_HEADERS
        )

>       assert download_res.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

tests/test_05_file_management_api.py:662: AssertionError
__________________________________________ test_report_download_multiple_times __________________________________________

    def test_report_download_multiple_times():
        """同一レポートの複数回ダウンロードテスト（DB更新は初回のみ）"""
        medical_id = 5
        publication_ym = "2025-05"
        user_id_1 = "10"
        user_id_2 = "1"  # 異なるユーザー

        # 最新レポートのpublication_idを取得
        from src.database import SessionLocal
        from src.models.pg_optigate.report_publication_log import ReportPublicationLog

        db = SessionLocal()
        try:
            latest_report = db.query(ReportPublicationLog).filter(
                ReportPublicationLog.medical_id == medical_id,
                ReportPublicationLog.publication_ym == publication_ym
            ).order_by(ReportPublicationLog.upload_datetime.desc()).first()

            if not latest_report:
                print("⚠️ テスト用レポートが見つかりません。先にtest_report_download_after_publishを実行してください")
                return

            publication_id = latest_report.publication_id

            # 1回目のダウンロード（既に実行済みの想定）
            first_download_user_id = latest_report.download_user_id
            first_download_datetime = latest_report.download_datetime

        finally:
            db.close()

        # 2回目のダウンロード（別ユーザー）
        download_res = requests.get(
            f"{BASE_URL}/files/reports/download/{publication_id}",
            params={"user_id": user_id_2},
            headers=TEST_HEADERS
        )

>       assert download_res.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

tests/test_05_file_management_api.py:743: AssertionError
================================================ short test summary info ================================================
FAILED tests/test_02_user_entity_links_api.py::test_create_user_entity_link - assert 500 == 200
FAILED tests/test_05_file_management_api.py::test_publish_onpremise_reports - assert 404 == 200
FAILED tests/test_05_file_management_api.py::test_report_download_after_publish - assert 404 == 200
FAILED tests/test_05_file_management_api.py::test_report_download_multiple_times - assert 404 == 200
======================================== 4 failed, 84 passed, 1 skipped in 3.67s ========================================
((.venv) ) smds@aoi-ph-017:~/projects/optiserve-backend$
